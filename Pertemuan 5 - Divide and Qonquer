Mencari nilai MAX dan MIN

def divideAndConquer_Max(arr, ind, len):
    maximum = -1;

    if (ind >= len - 2):
        if (arr[ind] > arr[ind + 1]):
            return arr[ind];
        else:
            return arr[ind + 1];

    maximum = divideAndConquer_Max(arr, ind + 1, len);

    if (arr[ind] > maximum):
        return arr[ind];
    else:
        return maximum;

def divideAndConquer_Min(arr, ind, len):
    minimum = 0;

    if (ind >= len - 2):
        if (arr[ind] < arr[ind + 1]):
            return arr[ind];
        else:
            return arr[ind + 1];

    minimum = divideAndConquer_Min(arr, ind + 1, len);

    if (arr[ind] < minimum):
        return arr[ind];
    else:
        return minimum;

if __name__ == '__main__':
    minimum, maximum = 0, -1;

    arr = [4,12,23,9,21,1,35,2,24];

    maximum = divideAndConquer_Max(arr, 0, 9);
    minimun = divideAndConquer_Min(arr, 0, 9);
    print("The minimum number in the array is: ", minimun);
    #result = The minimum number in the array is: 1
    print("The maximum number in the array is: ", maximum);
    #result = The maximum number in the array is: 35
===========================================================================================================================
MergeSort in python

def mergeSort(array):
    if len(array) > 1:

        #r is the point where the array is divided into two subarrays
        r = len(array)//2
        L = array[:r]
        M = array[r:]

        #Sort the two halves
        mergeSort(L)
        mergeSort(M)

        i = j = k = 0

        #Until we reach either end of either L or M, pick larger among
        #Element L and M and place them in the correct position at A[p..r]
        while i < len(L) and j < len(M):
            if L[i] < M[j]:
                array[k] = L[i]
                i += 1
            else:
                array[k] = M[j]
                j += 1
            k += 1

        while i < len(L):
            array[k] = L[i]
            i += 1
            k += 1

        while j < len(M):
            array[k] = M[j]
            j += 1
            k += 1

#print the array
def printList(array):
    for i in range(len(array)):
        print(array[i], end=" ")
    print()

#Driver program
if __name__ == '__main__':
    array = [4,12,23,9,21,1,35,2,24]

    mergeSort(array)

    print("Sorted array is: ")
    printList(array)
---------------------------------------------------------------------------------------------------------------------------
Output:
1 2 4 9 12 21 23 24 35
===========================================================================================================================
QuickSort

def partition(array, low, high):
    # choose the rightmost element as pivot
    pivot = array[high]

    # pointer for greater element
    i = low -1

    # traverse through all elements
    # compare each element with pivot
    for j in range(low, high):
        if array[j] <= pivot:
            # if element smaller than pivot is found
            # swap it with the greater element pointed by i
            i = i + 1

            # swapping element at i with element at j
            (array[i], array[j]) = (array[j], array[i])

    # swap the pivot element with the greater element specified by i
    (array[i + 1], array[high]) = (array[high], array[i + 1])

    # return the position from where partition is done
    return i + 1

# function to perform quicksort
def quickSort(array, low, high):
    if low < high:
        # find pivot element such that
        # element smaller than pivot are on the left
        # element greater than pivot are on the right
        pi = partition(array, low, high)

        # recursive call on the left of pivot
        quickSort(array, low, pi - 1)

        # recursive call on the right of pivot
        quickSort(array, pi + 1, high)

data = [4,12,23,9,21,1,35,2,24]
print("Unsorted array")
print(data)

size = len(data)
quickSort(data, 0, size - 1)

print('Sorted Array in Ascending Order: ')
print(data)

---------------------------------------------------------------------------------------------------------------------------
Output:

Unsorted array
[4, 12, 23, 9, 21, 1, 35, 2, 24]
Sorted Array in Ascending Order: 
[1, 2, 4, 9, 12, 21, 23, 24, 35]
===========================================================================================================================
Inversi dalam suatu Array

Berfungsi untuk menghitung berapa banyak perubahan yang harus dilakukan untuk mengubah array menjadi bentuk yang urut.

def countInversion(arr):
    result = 0
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] > arr[j]:
                result += 1
    return result

arr = [21,70,36,14,25]
result = countInversion(arr)
print(result)
---------------------------------------------------------------------------------------------------------------------------
Output:

6
===========================================================================================================================
Hitung Inversi dengan divide and conquer

def countInversion(arr):
    icount = 0
    if len(arr) <= 1:
        return icount

    mid = len(arr)//2
    left = arr[:mid]
    right = arr[mid:]
    icount += countInversion(left)
    icount += countInversion(right)
    i = j = k = 0

    #print(left)
    #pirnt(right)

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            arr[k] = left[i]
            i += 1
        else:
            #print(left[i], right[j])
            arr[k] = right[j]
            j += 1
            icount += (mid-i)
        k += 1

    while i < len(left):
        arr[k] = left[i]
        i += 1
        k += 1
    while j < len(right):
        arr[k] = right[j]
        j += 1
        k += 1
    return icount

arr = [1,20,6,4,5]

result = countInversion(arr)
print(result)
---------------------------------------------------------------------------------------------------------------------------
Output:

5
===========================================================================================================================
Maximum Subarray Sum (tanpa divide and conquer)

Mencari hasil penjumlahan terbesar dari suatu array yang isinya nilai negatif dan positif.
Misal suatu array isinya {-2, -5, 6, -2, -3, 1, 5, -6}, maka penjumlahan terbesar disusun dari {6, -2, -3, 1, 5} = 7

cara kerja
arr = [-2,-5,6,-2,-3,1,5,-6]		len(arr) = 8

max_so_far  >  max_ending_here?	i
0			0				0
			0+(-2) = -2			 
===========================
0			0				1
			0+(-5) = -5		
			0				
===========================
6			0 + 6 = 6			2
===========================
6			6 + (-2) = 4		3
===========================
6			4 + (-3) = 1		4
===========================
6			1 + 1 = 2			5
===========================
7			2 + 5 = 7			6
===========================
7			7 + (-6) = 1		7


def maxSubSum(arr):
    max_so_far = 0
    max_ending_here = 0
    for i in range(len(arr)):
        max_ending_here += arr[i]
        if max_ending_here > max_so_far:
            max_so_far = max_ending_here
        if max_ending_here < 0:
            max_ending_here = 0
    return max_so_far

arr = [-2,-5,6,-2,-3,1,5,-6]
result = maxSubSum(arr)
print(result)
---------------------------------------------------------------------------------------------------------------------------
Output:

7
===========================================================================================================================
Maximum Subarray Sum (menggunakan divide and conquer)

def maxCrossingSum(arr, low, mid, high):
    result = 0; leftSum = float('-Infinity')
    for i in range(mid, low - 1, -1):
        result += arr[i]
        if result>leftSum:
            leftSum = result
    result = 0; rightSum = float('-Infinity')
    for i in range(mid + 1, high + 1):
        result += arr[i]
        if result>rightSum:
            rightSum = result
    return leftSum + rightSum

def maxSum(arr, low, high):
    if low == high:
        return arr[low]
    mid = (low + high)//2
    return max(maxSum(arr, low, mid), maxSum(arr, mid+1, high), maxCrossingSum(arr, low, mid, high))

arr = [-2,-5,6,-2,-3,1,5,-6]
result = maxSum(arr, 0, len(arr)-1)
print(result)
---------------------------------------------------------------------------------------------------------------------------
Output:

7
===========================================================================================================================
Longest Common Prefix

Mencari potongan suku kata (prefix) yang sama dan terpanjang


===========================================================================================================================
Median dua array urut berbeda ukuran dengan divide dan conquer

def Solution(arr):
    n = len(arr)
    # if length of array is even
    if n % 2 == 0:
        z = n // 2
        e = arr[z]
        q = arr[z - 1]
        ans = (e + q) / 2
        return ans
    # if length of array is odd
    else:
        z = n // 2
        ans = arr[z]
        return ans

arr1 = [-5,3,6,12,15]
arr2 = [-12,-10,-6,-3,4,10]
# concatenating the two arrays
arr3 = arr1 + arr2
# sorting the resultan array
arr3.sort()
print("Median = ", Solution(arr3))
---------------------------------------------------------------------------------------------------------------------------
Output:


Median =  3
===========================================================================================================================













